1) In java, when we use "==" operator for int variables, the values are
checked here. Everything happens in stack.
However, if we do it for Integer datatype, there will be places in heap
for the value of the variable. 
Here, "==" operator will check the references of them.
If the values of two Integers are in the
range of [-128, 127], the same place in heap is used for both, that is
why if the values are the same, it will return true.
Otherwise, the places in heap will be different, so it will return false.
In that case, to be able to compare the values, we check a specific method
"num1.equals(num2)".

Note that, arrays are also reference type. So, thus, if we have two
different arrays (even the same values), the "==" operator will return
false, because their address are different. If we want to check their
contents, we will use "Arrays.equals(arr1, arr2)" method.

2) In Java, the native keyword is used to declare a method that is implemented in another programming language, such as C or C++. This means that while the methodâ€™s signature is defined in Java, its actual implementation resides in a native library. To facilitate communication between Java and native code, the Java Native Interface (JNI) is used. JNI provides a set of APIs that enable Java code to call functions written in other languages and vice versa, allowing interaction with system-level operations or legacy libraries not available directly in Java. On the other hand, the @Deprecated annotation is used to mark classes, methods, or fields that are outdated and should no longer be used. It serves as a warning to developers that the element might be removed in future versions or replaced by a better alternative. This annotation often includes a Javadoc comment suggesting the preferred replacement and explaining why the element is deprecated, guiding developers on how to update their code accordingly.

